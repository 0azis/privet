import json
import aiogram
import redis
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, FSInputFile
from aiogram import F, Bot, Dispatcher, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.enums.content_type import ContentType
import logging
import asyncio
from client import Client 
from client import User
from cities import city_exist

token = "6724580660:AAHp3VQLT-pTBlgnyi1nzoOf1FvK-gKKcxQ"

bot = aiogram.Bot(token)
dp = aiogram.Dispatcher()
client = Client()
cache = redis.Redis()
router = Router()

def startup_keyboard():
  actions = [
    [KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")],
    [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
    [KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")]
  ]
  keyboard = ReplyKeyboardMarkup(keyboard=actions, resize_keyboard=True)
  return keyboard

class Form(StatesGroup):
  id = State()
  name = State()
  age = State()
  location = State()
  gender = State()
  avatar = State()
  description = State()

class Activities(StatesGroup):
  activities = State() # should have be a list (always)

class Wishes(StatesGroup):
  age = State()
  gender = State()
  activities = State()

class Reaction(StatesGroup):
  user = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
  intro = FSInputFile("../background.png")
  await bot.send_photo(message.chat.id, intro, caption="üëã <b>–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Privet!</b>\n–¢–≤–æ–π —Å–ø—É—Ç–Ω–∏–∫ –≤ –º–∏—Ä–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ —Ç–æ—á–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.\n\n<i>–ë–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å–∏–º –±–æ–ª—å—à–∏—Ö –¥—è–¥—å –∏ —Ç–µ—Ç—å –∑–¥–µ—Å—å –Ω–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—èüòâ</i>", parse_mode='HTML') 
  # await message.answer("üëã <b>–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Privet!</b>\n–û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö —É–¥–æ–±–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –æ–±—â–µ–Ω–∏—è! –ë–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å–∏–º –±–æ–ª—å—à–∏—Ö –¥—è–¥—å –∏ —Ç–µ—Ç—å –∑–¥–µ—Å—å –Ω–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—èüòâ", parse_mode='HTML')
  user_id = message.from_user.id 
  if client.user_exists(user_id):
    await message.answer("–ì–æ—Ç–æ–≤ —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã?", reply_markup=startup_keyboard())
  else:
    create = [[KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")]]
    keyboard = ReplyKeyboardMarkup(keyboard=create, resize_keyboard=True)
    await message.answer("–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–º–æ–∂–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π", reply_markup=keyboard)

@router.message(F.text.lower() == "—Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
async def make_profile(message: Message, state: FSMContext):
  await state.update_data(id=message.from_user.id)
  await state.set_state(Form.name)
  await message.answer("<b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è</b>\n\n-------\n<i>–ü—Ä–æ—Å–∏–º —É–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è, –º—ã –±–µ—Ä–µ–∂–Ω–æ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ‚ù§Ô∏è</i>", parse_mode='HTML', reply_markup=ReplyKeyboardRemove())

@router.message(Form.name)
async def set_name(message: Message, state: FSMContext):
  await state.update_data(name=message.text)
  await state.set_state(Form.age)
  await message.answer("<b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç</b>\n\n-------\n<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –æ—Ç 14 –¥–æ 30 –ª–µ—Çüî•</i>", parse_mode='HTML')

@router.message(Form.age)
async def set_age(message: Message, state: FSMContext):
  try:
    age = int(message.text)
    await state.update_data(age=age)
    await state.set_state(Form.location)
    await message.answer("<b>–ù–∞–ø–∏—à–∏—Ç–µ, –≥–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ</b>\n\n-------\n<i>–£—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏üí™</i>", parse_mode='HTML')
  except:
    await message.answer("<b>–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 14 –¥–æ 30 –ª–µ—Ç</b>", parse_mode='HTML')

@router.message(Form.location)
async def set_location(message: Message, state: FSMContext):
  if message.text.isdigit():
    await message.answer("")
  elif city_exist(message.text) == False:
    await message.answer("<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤ –Ω–∞—à–∏—Ö –±–∞–∑–∞—Öüò≠</b>\n\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</i>", parse_mode='HTML')
  else:
    genders = [
      [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],
      [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]
    ]
    keyboard_gender = ReplyKeyboardMarkup(keyboard=genders, resize_keyboard=True)
    await state.update_data(location=message.text)
    await state.set_state(Form.gender)
    await message.answer("<b>–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª</b>\n\n-------\n<i>–û–±–µ—â–∞–µ–º, —á—Ç–æ –Ω–µ –±—É–¥–µ–º –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏—è –Ω–∞ –Ω–µ—Å—Ö–æ–¥—Å—Ç–≤–æ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –∏ –≤–∞—à–µ–≥–æ –ø–æ–ª–∞üòã</i>", parse_mode='HTML', reply_markup=keyboard_gender)

@router.message(Form.gender)
async def set_gender(message: Message, state: FSMContext): 
  gender = message.text.lower()
  if gender not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
    await message.answer("<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –ø–æ–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤ –º–µ–Ω—é</i>", parse_mode='HTML')
  else:
    await state.update_data(gender=message.text) 
    await state.set_state(Form.avatar)
    await message.answer("<b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n-------\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —Å–∞–º–æ–µ –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ (–º—ã –∑–Ω–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –≤—Å–µ —Ç–∞–∫–∏–µüòä)</i>", parse_mode='HTML', reply_markup=ReplyKeyboardRemove())

@router.message(Form.avatar)
async def set_avatar(message: Message, state: FSMContext):
  if message.content_type != ContentType.PHOTO:
    await message.answer("<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ</b>\n\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µüñº</i>", parse_mode='HTML')
  else:
    await message.bot.download(file=message.photo[-1].file_id, destination=f"./upload/{message.from_user.id}.png")

    await state.set_state(Form.description)
    await message.answer("<b>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ</b>\n\n------\n<i>–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±—è —Å–æ –≤—Å–µ—Ö –ª—É—á—à–∏—Ö —Å—Ç–æ—Ä–æ–Ωüòé</i>", parse_mode='HTML')

@router.message(Form.description)
async def set_description(message: Message, state: FSMContext):
  payload = await state.update_data(description=message.text)
  user = User(id=payload['id'], fullname=payload['name'], age=payload['age'], location=payload['location'], gender=payload['gender'], description=payload['description'])
  if client.create_account(user):
    cache.set(f"{message.from_user.id}", 0)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π!", reply_markup=startup_keyboard())
    await state.clear()
  else:
    await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

@router.message(F.text.lower() == "—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def start_profiles(message: Message, state: FSMContext):
  try:
    response = client.get_users(message.from_user.id)
    users = json.loads(response)['data']
    i = int(cache.get(f"{message.from_user.id}"))
    reactions = [
      [KeyboardButton(text="‚ù§Ô∏è")],
      [KeyboardButton(text="üíî")]
    ]
    keyboard_reactions = ReplyKeyboardMarkup(keyboard=reactions, resize_keyboard=True)
    if i == len(users):
      await message.answer("–ê–Ω–∫–µ—Ç—ã –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –Ø –Ω–∞–ø–∏—à—É, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ.", reply_markup=startup_keyboard())
      await state.clear()
    else:
      if users[i]['id'] == message.from_user.id:
        i += 1 
      user = users[i]
      photo = FSInputFile(f"./upload/{user['id']}.png") 
      await message.answer_photo(photo, caption=f"""‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è\n\n<b>–ò–º—è</b>: {user['fullName']}\n<b>–í–æ–∑—Ä–∞—Å—Ç</b>: {user['age']}\n<b>–ì–æ—Ä–æ–¥</b>: {user['location']}\n<b>–ü–æ–ª</b>: {user['gender']}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {user['description']}""", reply_markup=keyboard_reactions, parse_mode='HTML')
      await state.update_data(user=user['id'])
      await state.set_state(Reaction.user)
      cache.set(f"{message.from_user.id}", i+1)
  except:
    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

@router.message(Reaction.user)
async def set_reaction(message: Message, state: FSMContext):
  data = await state.get_data()
  if message.text == "‚ù§Ô∏è":
    await bot.send_message(data['user'], text=f"–ö–∞–∂–µ—Ç—Å—è, –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞.\n–í–æ—Ç —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ - @{message.from_user.username}\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!")
  await start_profiles(message, state)

@router.message(F.text.lower() == "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
async def wishes(message: Message):
  pass

@router.message(F.text.lower() == "–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
  profile = client.profile(message.from_user.id)
  profile_json = json.loads(profile)['data']   
  photo = FSInputFile(f"./upload/{profile_json['id']}.png") 
  await message.answer_photo(photo, caption=f"""‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è\n\n<b>–ò–º—è</b>: {profile_json['fullName']}\n<b>–í–æ–∑—Ä–∞—Å—Ç</b>: {profile_json['age']}\n<b>–ì–æ—Ä–æ–¥</b>: {profile_json['location']}\n<b>–ü–æ–ª</b>: {profile_json['gender']}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {profile_json['description']}""",  parse_mode='HTML')

@router.message()
async def error_message(message: Message):
  await message.answer("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é")

async def main():
  bot = Bot(token=token)
  dp = Dispatcher()
  dp.include_router(router)

  await dp.start_polling(bot)

if __name__ == "__main__":
  asyncio.run(main())

